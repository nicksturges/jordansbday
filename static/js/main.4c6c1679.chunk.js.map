{"version":3,"sources":["components/CountDown2.js","components/rsvp.js","App.js","serviceWorker.js","index.js"],"names":["Countdown","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","hours","min","sec","inherits","createClass","key","value","_this2","interval","setInterval","date","calculateCountdown","setState","stop","endDate","diff","Date","parse","timeLeft","years","millisec","Math","floor","clearInterval","String","length","countDown","react_default","a","createElement","className","classNames","addLeadingZeros","React","Component","defaultProps","rsvp","_Component","apply","arguments","Card","style","height","width","marginTop","boxShadow","CardImg","top","src","alt","CardBody","CardSubtitle","Button","href","background","App","id","CountDown2","components_rsvp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c6c1679.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from 'prop-types';\n\nexport class Countdown extends React.Component {\n\n  static propTypes = {\n    date: PropTypes.string.isRequired,\n    className: PropTypes.string\n  };\n\n  static defaultProps = {\n    date: new Date('05/04/2019')\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0,\n    }\n  }\n\n  componentDidMount() {\n    // update every second\n    this.interval = setInterval(() => {\n      const date = this.calculateCountdown(this.props.date);\n      date ? this.setState(date) : this.stop();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  calculateCountdown(endDate) {\n    let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n\n    // clear countdown when date is reached\n    if (diff <= 0) return false;\n\n    const timeLeft = {\n      years: 0,\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0,\n      millisec: 0,\n    };\n\n    // calculate time difference between now and expected date\n    if (diff >= (365.25 * 86400)) { // 365.25 * 24 * 60 * 60\n      timeLeft.years = Math.floor(diff / (365.25 * 86400));\n      diff -= timeLeft.years * 365.25 * 86400;\n    }\n    if (diff >= 86400) { // 24 * 60 * 60\n      timeLeft.days = Math.floor(diff / 86400);\n      diff -= timeLeft.days * 86400;\n    }\n    if (diff >= 3600) { // 60 * 60\n      timeLeft.hours = Math.floor(diff / 3600);\n      diff -= timeLeft.hours * 3600;\n    }\n    if (diff >= 60) {\n      timeLeft.min = Math.floor(diff / 60);\n      diff -= timeLeft.min * 60;\n    }\n    timeLeft.sec = diff;\n\n    return timeLeft;\n  }\n\n  stop() {\n    clearInterval(this.interval);\n  }\n\n  addLeadingZeros(value) {\n    value = String(value);\n    while (value.length < 2) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  render() {\n    const countDown = this.state;\n\n    return (\n      <div className={classNames(\"neal-countdown\", this.props.className)}>\n        <span className=\"countdown-col\">\n          <span className=\"countdown-col-element\">\n            <strong className=\"countdown-col-element-number\"> {this.addLeadingZeros(countDown.days)}</strong>\n            <span className=\"countdown-col-element-text\">{countDown.days === 1 ? 'Day' : 'Days'}</span>\n          </span>\n        </span>\n\n        <span className=\"countdown-col\">\n          <span className=\"countdown-col-element\">\n            <strong className=\"countdown-col-element-number\"> {this.addLeadingZeros(countDown.hours)}</strong>\n            <span className=\"countdown-col-element-text\"> Hours</span>\n          </span>\n        </span>\n\n\n        <span className=\"countdown-col\">\n          <span className=\"countdown-col-element\">\n            <strong className=\"countdown-col-element-number\"> {this.addLeadingZeros(countDown.min)}</strong>\n            <span className=\"countdown-col-element-text\"> Min</span>\n          </span>\n        </span>\n\n        <span className=\"countdown-col\">\n          <span className=\"countdown-col-element\">\n            <strong className=\"countdown-col-element-number\">  {this.addLeadingZeros(countDown.sec)}</strong>\n            <span className=\"countdown-col-element-text\"> Sec</span>\n          </span>\n        </span>\n      </div>\n    );\n  }\n}\nexport default Countdown","import React, { Component } from 'react';\nimport { Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button } from 'reactstrap';\n  import '../App.css';\n// import Button from 'react-bootstrap/Button';\nexport class rsvp extends Component {\n  render() {\n      let cardStyle = {\n          height: '200px',\n          width: '200px',\n          marginTop: '20px',\n          boxShadow: '3px 5px 3px'\n      }\n      \n    return (\n      \n       <div className=\"cardDiv\">\n      <Card style={cardStyle}>\n        <CardImg top width=\"50%\" style={{height:'100%'}} src=\"https://images-na.ssl-images-amazon.com/images/I/51yQeNJ42qL._SX348_BO1,204,203,200_.jpg\" alt=\"Card image cap\" />\n        <CardBody>\n          \n          <CardSubtitle>Click on the button to rsvp to Jordans 10th Birthday Party!</CardSubtitle>\n          <Button href=\"https://jordansbday.app.rsvpify.com\" style={{background : \" green\"}}>RSVP</Button>\n        </CardBody>\n      </Card>\n      </div>\n    \n            \n    );\n  }\n}\n\nexport default rsvp\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport CountDown from './components/CountDown2';\nimport Rsvp from './components/rsvp'\n\n\nclass App extends Component {\n\n  \n  \n\n  render() {\n    \n    return (\n      <div className=\"App\">\n      <div> \n        <h1 className=\"title\" id=\"1\">Jordans </h1>\n        <h1 className=\"title\" id=\"2\">10'th</h1>\n        <h1 className=\"title\" id=\"3\">Birthday!</h1>\n        </div>\n\n        <CountDown />\n        <Rsvp />\n      \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}